"""
Script: interpolate_contour_area.py

Description:
This script processes a shapefile containing bathymetric contour lines to estimate cumulative surface
area at 0.5-meter elevation intervals. It first rasterizes the vector contours into a Digital Elevation
Model (DEM), then uses image analysis techniques to extract interpolated contour lines. For each contour,
the script approximates the enclosed area by buffering and unioning geometries.

Inputs:
- Shapefile: 'GIS/Bathymetry/LR_Topography_2m.shp' (with 'Contour' attribute)

Outputs:
- DataFrame of elevation (m) vs cumulative area (mÂ²)
- Optional: export interpolated contours or table to file

Requirements:
- geopandas
- rasterio
- numpy
- shapely
- skimage
- matplotlib

Author: Brendann Busch, Matthew Hipsey
"""

import geopandas as gpd
import rasterio
from rasterio import features
import numpy as np
from shapely.geometry import LineString
from shapely.ops import unary_union
from skimage import measure
import pandas as pd
import os

# -----------------------------
# 1. Load shapefile and filter
# -----------------------------
input_shapefile = 'GIS/Bathymetry/LR_Topography_2m.shp'
gdf = gpd.read_file(input_shapefile)
gdf = gdf[gdf['Contour'].notnull()]
gdf['Contour'] = gdf['Contour'].astype(float)

# -----------------------------
# 2. Rasterize contours to DEM
# -----------------------------
# Define raster bounds and resolution
bounds = gdf.total_bounds  # [minx, miny, maxx, maxy]
resolution = 2  # meters
width = int((bounds[2] - bounds[0]) / resolution)
height = int((bounds[3] - bounds[1]) / resolution)

transform = rasterio.transform.from_origin(bounds[0], bounds[3], resolution, resolution)

# Create raster from contour lines
raster = features.rasterize(
    ((geom, value) for geom, value in zip(gdf.geometry, gdf['Contour'])),
    out_shape=(height, width),
    transform=transform,
    fill=np.nan,
    all_touched=True,
    dtype='float32'
)

# -----------------------------
# 3. Interpolate contours at 0.5 m steps
# -----------------------------
min_elev = -14
max_elev = np.nanmax(raster)
levels = np.arange(min_elev, max_elev + 0.5, 0.5)

interpolated_contours = []
for level in levels:
    contours = measure.find_contours(raster, level=level)
    for contour in contours:
        # Convert image coordinates to spatial coordinates
        coords = [rasterio.transform.xy(transform, r, c) for r, c in contour]
        line = LineString(coords)
        interpolated_contours.append({'geometry': line, 'Contour': level})

contour_gdf = gpd.GeoDataFrame(interpolated_contours, crs=gdf.crs)

# -----------------------------
# 4. Calculate cumulative area at each height
# -----------------------------
results = []
for level in levels:
    below = contour_gdf[contour_gdf['Contour'] <= level]
    if below.empty:
        area = 0.0
    else:
        buffered = below.geometry.buffer(0.1)
        unioned = unary_union(buffered)
        if unioned.is_empty:
            area = 0.0
        elif unioned.geom_type == 'Polygon':
            area = unioned.area
        elif unioned.geom_type == 'MultiPolygon':
            area = sum(p.area for p in unioned.geoms)
        else:
            area = 0.0
    results.append({'Height_m': level, 'Area_m2': area})

# Create results table
area_df = pd.DataFrame(results)
print(area_df)

# -----------------------------
# Optional: Save outputs
# -----------------------------
# area_df.to_csv('height_area_table.csv', index=False)
# contour_gdf.to_file('interpolated_contours.shp')